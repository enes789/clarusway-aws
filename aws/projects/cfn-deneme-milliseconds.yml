AWSTemplateFormatVersion: 2010-09-09
Description: |
  CloudFormation Template for Milliseconds Converter Application. 
  This template creates Python Flask Web Application on Amazon Linux 2 (XXXXXXXXXXXXXXXXX) 
  EC2 Instance with custom security group allowing http connections on port 80 and SSH connection on port 22.
  Template should create Application Load Balancer with Auto Scaling Group of Amazon Linux 2 EC2 Instances within default VPC.
  Roman Numerals Converter Application is downloaded from Github repository, then installed on Flask.

Parameters:
  Keyname:
    Description: This is options of my key names
    Type: AWS::EC2::KeyPair::KeyName

Resources:
  ALBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP for ALB #required
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP for App from ALB #required
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt ALBSecGroup.GroupId
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          

  WebServerLT:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData: 
        ImageId: ami-0742b4e673072066f
        InstanceType: t2.micro
        KeyName: !Ref Keyname
        SecurityGroupIds: 
          - !GetAtt WebServerSecGroup.GroupId
        TagSpecifications: 
          - ResourceType: instance
            Tags: 
              - Key: Name
                Value: !Sub Web Server of ${AWS::StackName}
        UserData: !Base64 |
          #! /bin/bash
          
          yum update -y
          yum install python3 -y
          pip3 install flask
          cd /home/ec2-user
          TOKEN="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"
          FOLDER='https://$TOKEN@raw.githubusercontent.com/enes789/milliseconds_project/main'
          curl -s --create-dirs -o "/home/ec2-user/templates/index.html" -L $FOLDER/templates/index.html"
          curl -s --create-dirs -o "/home/ec2-user/templates/result.html" -L $FOLDER/templates/result.html"
          curl -s --create-dirs -o "/home/ec2-user/app.py" -L $FOLDER/app.py"
          python3 /home/ec2-user/app.py

  WebServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId: !GetAtt WebServerSecGroup.VpcId

  WebServerALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups: 
        - !GetAtt ALBSecGroup.GroupId
      Subnets:
        - subnet-60950d41
        - subnet-8622bdd9
        - subnet-6c1c8e0a
        - subnet-d07d509d
        - subnet-a6b01197
        - subnet-2df0a423
      Type: application

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions: #required
        - Type: forward
          TargetGroupArn: !Ref WebServerTargetGroup
      LoadBalancerArn: !Ref WebServerALB #required
      Port: 80
      Protocol: HTTP

  WebServerASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !GetAZs 
      DesiredCapacity: 2
      HealthCheckGracePeriod: 200
      HealthCheckType: ELB
      LaunchTemplate: 
        LaunchTemplateId: !Ref WebServerLT
        Version: !GetAtt WebServerLT.LatestVersionNumber
      MaxSize: 3 #required
      MinSize: 1 #required
      TargetGroupARNs:
        - !Ref WebServerTargetGroup    

Outputs:
  AppURL:
    Value: !Sub 
      - http://${PublicAddress}
      - PublicAddress: !GetAtt WebServerALB.DNSName
    Description: URL of the Milliseconds Application